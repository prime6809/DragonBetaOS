                opt     -l              
                ttl     System          ; Type Definitions for the Paladin 1M-92
                page                    
****************************************
                                        

                ifeq    CPUType-PAL1m92 
************************************************************
*
*     Dynamic Address Translator Definitions
*
                                        
***************
*
* Note that DAT.BlCt is also understood by AllProc and
* Chain (in OS9-P2) to be the number of blocks available
* to each task. If less than 64k is available, these
* routines must be modified to put DAT.Free in the
* blocks that can be allocated, and the required values
* into the other blocks, (eg the I/O block), to complete
* the DAT image.
*
DAT.BlCt        equ     16              ; D.A.T. blocks/address space available
*
***************
DAT.BlUs        equ     15              ; blocks available for RAM in address space
                                        
DAT.Blsz        equ     $1000           ; D.A.T. block size in bytes
DAT.ImSz        equ     DAT.BlCt*2      ; D.A.T. Image size
                                        
***************
*
* DAT.Addr calculates a mask for the top bits of the
* logical address that are mapped by the MMU
DAT.Addr        equ     -(DAT.BlSz/256) ; D.A.T. MSB Address bits
*
***************
                                        
                                        
***************
*
* This version is assuming that the MMU access
* and operate keys are the same register
DAT.Task        equ     $F042           ; Task register address
*
***************
                                        
DAT.TkCt        equ     16              ; task maps in the MMU
DAT.Regs        equ     $F060           ; DAT RAM base address
                                        
***************
*
* One block number must be guaranteed never to
* contain memory, (ROM or RAM). That block number
* is used by OS9 in the block map and DAT images
* to indicate an unallocated logical block
DAT.Free        equ     $C0             
*
***************
                                        
DAT.BlMx        equ     $FF             ; maximum block number
DAT.BMSz        equ     $100            ; Block Map size (one byte per block)
DAT.WrPr        equ     0               ; no Block Write Protect bit
DAT.WrEn        equ     0               ; no Block Write Enable bit
                                        
***************
*
* A task number of 0 is used to indicate
* 'no DAT task map allocated'. Therefore
* no actual DAT task number can be 0. The easiest
* thing to do is to set a bit in SysTask that
* has no effect on the DAT. If the DAT register
* cares about all 8 bits, then DATInit, SvcRet,
* PassSWI, LDABX, STABX, LDBBX, Mover00, SetDAT00,
* and Switch, (all at the end of OS9-P1), must be
* altered to ensure that the bits are correctly
* set
SysTask         equ     $80             ; System Task number
*
***************
                                        
IOBlock         equ     $FF             ; The block number for the I/O
                                        
***************
*
* OS9-P1 ColdStart initially sets up the system map
* with RAM block 0 at $0000, a ROMBlock at $E000,
* and the IOBlock at $F000.
ROMBlock        equ     $FE             ; ROM block mapped in on ColdStart at $E000
ROMCount        equ     1               ; number of blocks of ROM to so map in
RAMCount        equ     1               ; initial blocks of RAM
*
***************
                                        
ROMCheck        equ     Limited         ; check only top 64k for ROM
RAMCheck        equ     BlockTyp        ; check only first bytes of RAM blocks
LastRAM         equ     $BF             ; maximum RAM block number
                                        
                                        
                                        
***************
*
* If the I/O is addressed whenever the top
* address lines of the micro, (ie the logical
* bus), take a certain value, rather than being
* addressed through the DAT, then MappedIO must
* be set false
MappedIO        equ     1               
*
***************
                                        
FPort           set     $F340           ; floppy disk controller
HPort           set     $F360           ; hard disk controller

                ifeq    DiskType-PalFdisk 
DPort           set     FPort           ; address of floppy disk controller
DriveCnt        set     4               ; four floppy drives
                endc                    


                ifeq    DiskType-PalHdisk 
DPort           set     HPort           ; address of hard disk interface
                endc                    


                ifeq    CPUSpeed-OneMHz 
A.Dmac          set     $F320           ; address of DMA controller
A.Mapper        set     $F310           ; address of memory mapper
                else                    
A.Dmac          set     $F000           
A.Mapper        set     $F040           
                endc                    

A.Term          set     $F080           ; Terminal addresses
A.T1            set     A.Term+4        
A.T2            set     A.T1+4          
A.T3            set     A.T2+4          
A.T.Init        set     $15             ; default ACIA initialisation byte
A.P             set     $F0E4           ; address of parallel printer port
A.P1            set     $F0E0           ; address of serial printer ports
A.P2            set     A.P1+2          
A.Clock         set     $F0F0           ; address of MC146818 clock
A.Timer         set     $F0E8           ; address of MC6840 timer
                endc                    

                opt     l               
                                        
